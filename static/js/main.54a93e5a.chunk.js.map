{"version":3,"sources":["App.js","index.js"],"names":["emojiDictionary","emojis","Object","keys","App","useState","emoji","setEmoji","meaning","setMeaning","className","onChange","event","inputEmoji","target","value","placeholder","style","padding","minWidth","map","onClick","fontSize","cursor","rootElement","document","getElementById","createRoot","render"],"mappings":"iMAWMA,EAAkB,CACtB,eAAM,UACN,eAAM,YACN,eAAM,MACN,eAAM,cACN,eAAM,OACN,eACE,aAOEC,EAASC,OAAOC,KAAKH,GAEZ,SAASI,IACtB,MAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,mBAAS,kCAAiC,mBAAjEG,EAAO,KAAEC,EAAU,KAiB1B,OAEE,cADA,CACA,OAAKC,UAAU,MAAK,UAClB,6BAAI,oBACJ,uBACEC,SApBN,SAAuBC,GACrB,IAAMC,EAAaD,EAAME,OAAOC,MAChCR,EAASM,GAGPJ,EADEI,KAAcb,EACLA,EAAgBa,GAEhB,kCAEf,EAYME,MAAOT,EACPU,YAAa,oBACbC,MAAO,CACLC,QAAS,MACTC,SAAU,SAGd,+BAAI,IAAEb,EAAM,OAAM,IAClB,+BAAI,IAAEE,EAAQ,OAAM,IAOlBP,EAAOmB,KAAI,SAACd,GAAK,OACf,uBACEe,QAAS,WA1BjBZ,EAAWT,EA0B8BM,GAAM,EACvCW,MAAO,CAAEK,SAAU,OAAQJ,QAAS,SAAUK,OAAQ,WAAY,UAEjE,IACAjB,EAAO,MACH,MAKjB,CC1EA,IAAMkB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACxB,EAAG,M","file":"static/js/main.54a93e5a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\n/**\n * concept notes: styling in react\n */\n\n/**\n * concept of hashmap (object as hashmap)\n * O(1) and why we are doing this.\n */\nconst emojiDictionary = {\n  \"üòä\": \"Smiling\",\n  \"üò≥\": \"disbelief\",\n  \"üòî\": \"sad\",\n  \"ü•°\": \"takeout box\",\n  \"‚ù§Ô∏è\": \"love\",\n  \"üòë\":\n    \"annoyance\" /** add some more to show how the app now expands when there's new data */\n};\n\n/**\n * Bonus feature\n * converting an object to array of keys\n */\nconst emojis = Object.keys(emojiDictionary);\n\nexport default function App() {\n  const [emoji, setEmoji] = useState(\"\"); /** concept 2 is useState */\n  const [meaning, setMeaning] = useState(\"translation will appear here..\");\n\n  function changeHandler(event) {\n    const inputEmoji = event.target.value;\n    setEmoji(inputEmoji);\n\n    if (inputEmoji in emojiDictionary) {\n      setMeaning(emojiDictionary[inputEmoji]);\n    } else {\n      setMeaning(\"failure to recognise this emoji\");\n    }\n  }\n\n  function emojiClickHandler(inputEmoji) {\n    setMeaning(emojiDictionary[inputEmoji]);\n  }\n\n  return (\n    /** concept 3 is onchange */\n    <div className=\"App\">\n      <h1>inside outttttt</h1>\n      <input\n        onChange={changeHandler}\n        value={emoji}\n        placeholder={\"Search your emoji\"}\n        style={{\n          padding: \"1em\",\n          minWidth: \"80%\"\n        }}\n      />\n      <h2> {emoji} </h2> {/** Concept 1: JSX */}\n      <h3> {meaning} </h3> {/** how much part is re-rendered. */}\n      {\n        /** Bonus feature; if time permmits */\n        /**\n         * concepts to cover: mapping a list\n         * click handler on list item\n         */\n        emojis.map((emoji) => (\n          <span\n            onClick={() => emojiClickHandler(emoji)}\n            style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n          >\n            {\" \"}\n            {emoji}{\" \"}\n          </span>\n        ))\n      }\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}